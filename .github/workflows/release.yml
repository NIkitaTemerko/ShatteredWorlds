name: üì¶ Build & Release on push to main

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

permissions:
  contents: write
  actions: write

jobs:
  check-version:
    name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.VERSION }}
      is_mm: ${{ steps.check-patch.outputs.IS_MM }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: –ò–∑–≤–ª–µ—á—å –≤–µ—Ä—Å–∏—é –∏–∑ package.json
        id: get-version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

      - name: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–∏–Ω–æ—Ä –∏–ª–∏ –≤—ã—à–µ
        id: check-patch
        shell: bash
        run: |
          # –ë–µ—Ä—ë–º –≤–µ—Ä—Å–∏—é –∏–∑ –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
          VERSION="${{ steps.get-version.outputs.VERSION }}"
          echo "Got version: $VERSION"
          PATCH=${VERSION##*.}
          if [[ "$PATCH" == "0" ]]; then
            echo "IS_MM=true" >> "$GITHUB_OUTPUT"
          else
            echo "IS_MM=false" >> "$GITHUB_OUTPUT"
          fi

  release:
    name: –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞ (–º–∏–Ω–æ—Ä+)
    needs: check-version
    if: needs.check-version.outputs.is_mm == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies & pack
        run: |
          npm ci
          npm run pack

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          release_name: v${{ needs.check-version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./shattered-worlds.zip
          asset_name: shattered-worlds.zip
          asset_content_type: application/zip
