name: üì¶ Build & Release on push to main

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: write
  actions: write

jobs:
  check-version:
    name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–ª–∏–∑–∞
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.VERSION }}
      release_needed: ${{ steps.check-tag.outputs.RELEASE_NEEDED }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0           # –Ω—É–∂–Ω—ã —Ç–µ–≥–∏, –ø–æ—ç—Ç–æ–º—É –ø–æ–ª–Ω—ã–π –∫–ª–æ–Ω–∏–Ω–≥

      # 1. –±–µ—Ä—ë–º –≤–µ—Ä—Å–∏—é –∏–∑ package.json
      - name: –ò–∑–≤–ª–µ—á—å –≤–µ—Ä—Å–∏—é –∏–∑ package.json
        id: get-version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

      # 2. –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥ (vX.Y.Z)
      - name: –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
        id: get-tag
        shell: bash
        run: |
          git fetch --tags --force
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "LATEST_TAG=$LATEST_TAG" >> "$GITHUB_OUTPUT"

      # 3. —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
      - name: –ù—É–∂–µ–Ω –ª–∏ —Ä–µ–ª–∏–∑?
        id: check-tag
        shell: bash
        run: |
          VERSION="${{ steps.get-version.outputs.VERSION }}"
          LATEST="${{ steps.get-tag.outputs.LATEST_TAG }}"
          if [[ "v$VERSION" == "$LATEST" ]]; then
            echo "RELEASE_NEEDED=false" >> "$GITHUB_OUTPUT"
            echo "–í–µ—Ä—Å–∏—è $VERSION —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ —Ç–µ–≥–µ $LATEST"
          else
            echo "RELEASE_NEEDED=true" >> "$GITHUB_OUTPUT"
            echo "–ë—É–¥–µ–º —Ä–µ–ª–∏–∑–∏—Ç—å v$VERSION (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥: $LATEST)"
          fi

  release:
    name: –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞
    needs: check-version
    if: needs.check-version.outputs.release_needed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies & pack
        run: |
          npm ci
          npm run pack

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          release_name: v${{ needs.check-version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./shattered-worlds.zip
          asset_name: shattered-worlds.zip
          asset_content_type: application/zip
